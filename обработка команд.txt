по шагам

1) проверяем наличие сессии и получаем роль
2) сверяем роль из сессии и из пути - если не совпадают то отказ 
3) вызываем эту команду, в зависимости от роли команда обрабатывается по разному

регистрация
new_abonent
проверяем уникальность логина
проверяем роль и для роли необходимость паскей
создаем абонента

набор функций
ответ 
- в консоль
- установить заголовок
- ответ клиенту

запросы к базе
обработка ошибок выполнения запроса

переключатели по роли

массив команда
храню и заполняю в базе  в виде таблици, 
используцю в виде массива, храню в памяти
4 мерный = 3 массив + 1 объект		
команда, блок, массив пользователей, объект проверок
способ заполнения
- по умолчинию (обязательно)
- для пользователя (не обязательно)
ЕЩЕ можно хранить в самом блоке

линейная обработка команд
0) проверяем существование такой роли
1) если команда new_abonent, сессия не нужна
- иначе, проверка сессии
2) если роль buyer, проверяем inn
- иначе проверяем passkey
3) проверяем наличие команды и вызываем соответствующую функцию
4) корректируем логику функции в зависимости от роли
Важно!!! нужно проверить, что функция отправляет ответ


текущая версия
1) проверяем существование такой роли
2) проверяем существование такой команды
3) вызываем объект=команда, старт

req - запрос
res - ответ
data - содержимое запроса
obj - собранные данные в процессе обработки запроса

РОЛИ
Клиент - buyer
Продавец - seller
Менеджер - manager
Админ - admin

Ветка new_abonent
2.1) проверяем уникальность login
2.2) создаем сессию
2.3) проверяем сессию на уникальность
- нет, к пункту 2.2
2.4) создаем абонента

new_passkey
1) проверяем наличие сесссии
2) создаем паскей
3) в зависимости от роли и времени 
3) проверяем паскей с этой ролью на уникальность
4) создаем абонента

edit_block
1) проверяем наличие сесссии
2) выполняем запрос на редактирование с учетом
- роли 
- принадлежности (для менеджера и продавца )




